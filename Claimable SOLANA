<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Connect Wallet</title>
  <script src="https://cdn.jsdelivr.net/npm/@solana/web3.js@1.88.0/lib/index.iife.min.js"></script>
</head>
<body style="font-family: sans-serif; padding: 40px;">

  <h1>Connect your wallet</h1>
  <button id="connectButton">Connect Wallet</button>
  <p id="walletStatus"></p>

  <div id="solStatus"></div>

  <script>
    const connectButton = document.getElementById("connectButton");
    const status = document.getElementById("walletStatus");
    const solStatus = document.getElementById("solStatus");

    let provider = null;
    let userPublicKey = null;

    const getProvider = () => {
      if ("phantom" in window) {
        const anyWindow = window;
        const provider = anyWindow.phantom?.solana;
        if (provider?.isPhantom) return provider;
      }
      window.open("https://phantom.app/", "_blank");
    };

    connectButton.addEventListener("click", async () => {
      provider = getProvider();
      if (!provider) return;

      try {
        const resp = await provider.connect();
        userPublicKey = resp.publicKey.toString();
        status.innerText = `Wallet connected: ${userPublicKey}`;
        checkClaimableSOL(userPublicKey);
      } catch (err) {
        console.error("Connection error:", err);
      }
    });

    async function checkClaimableSOL(walletAddress) {
      const connection = new solanaWeb3.Connection(solanaWeb3.clusterApiUrl("mainnet-beta"), "confirmed");

      try {
        const balance = await connection.getBalance(new solanaWeb3.PublicKey(walletAddress));
        const sol = balance / solanaWeb3.LAMPORTS_PER_SOL;

        solStatus.innerHTML = `
          <p>You currently have <strong>${sol.toFixed(4)} SOL</strong> in your wallet.</p>
          <button id="recoverBtn">Recover your SOL</button>
        `;
      } catch (err) {
        solStatus.innerHTML = `<p>Error fetching SOL balance.</p>`;
        console.error(err);
      }
    }
  </script>
</body>
</html>
